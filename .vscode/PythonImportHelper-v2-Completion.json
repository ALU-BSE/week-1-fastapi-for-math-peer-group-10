[
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Matrix",
        "kind": 6,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "class Matrix(BaseModel):\n    matrix: list\n#Initialise M & B as variable\nM = np.random.rand(5,5)\nB = np.random.rand(5,5)\ndef sigmoid(x):\n    return 1 / (1 + math.exp(-x))\ndef f(x):\n    pass\n#Implement the formula MX + B",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "sigmoid",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def sigmoid(x):\n    return 1 / (1 + math.exp(-x))\ndef f(x):\n    pass\n#Implement the formula MX + B\n#Have two function one using numpy and another not using numpy\n#Return \n#initialize x as a 5 * 5 matrix\n#Make a call to the function\n#Recreate the function with the sigmoid Function",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 2,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "def f(x):\n    pass\n#Implement the formula MX + B\n#Have two function one using numpy and another not using numpy\n#Return \n#initialize x as a 5 * 5 matrix\n#Make a call to the function\n#Recreate the function with the sigmoid Function\nif __name__ == \"__main__\":\n    uvicorn.run(app)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "app = FastAPI()\nclass Matrix(BaseModel):\n    matrix: list\n#Initialise M & B as variable\nM = np.random.rand(5,5)\nB = np.random.rand(5,5)\ndef sigmoid(x):\n    return 1 / (1 + math.exp(-x))\ndef f(x):\n    pass",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "M = np.random.rand(5,5)\nB = np.random.rand(5,5)\ndef sigmoid(x):\n    return 1 / (1 + math.exp(-x))\ndef f(x):\n    pass\n#Implement the formula MX + B\n#Have two function one using numpy and another not using numpy\n#Return \n#initialize x as a 5 * 5 matrix",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "B = np.random.rand(5,5)\ndef sigmoid(x):\n    return 1 / (1 + math.exp(-x))\ndef f(x):\n    pass\n#Implement the formula MX + B\n#Have two function one using numpy and another not using numpy\n#Return \n#initialize x as a 5 * 5 matrix\n#Make a call to the function",
        "detail": "test",
        "documentation": {}
    }
]